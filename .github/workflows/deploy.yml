name: Upload Python Package
##############################################
# Create A Release to trigger a build       ##
# make sure your tag is Maj.Min.Build form  ##
##############################################
on:
  release:
    types: # This configuration does not affect the page_build event above
      - created
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Identifier'
        required: true
        default: 'a0.0.0v'
jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.release.target_commitish }}
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        echo Tag Version: ${GITHUB_REF##*/}
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        pip install . -v
    - name: Update Version
      run: |
        TAG=${GITHUB_REF##*/}
        if ! [[ "${{ github.event.inputs.version }}" == "" ]]; then
          TAG=${{ github.event.inputs.version }}
        fi
        echo Tag Version: $TAG
        python -c "import releasy,os;print(os.listdir(os.path.dirname(releasy.__file__)))"
        python -c "import releasy,os;print('D:',os.listdir(os.path.join(os.path.dirname(releasy.__file__),'DATA')))"
        # set the version and current hash
        rel-easy setver --version $TAG --sha1
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |

        #cat releasy/version.py
        if ! [[ "${{ github.event.inputs.version }}" == "" ]]; then
          echo "TRIGGERED FROM BUTTON"
          rel-easy publish --build_only
        #  rm -rf dist
        else
          echo "TRIGGERED FROM RELEASE"
          rel-easy publish --build_only
        fi
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: |
          dist
    - name: Cleanup
      # run any cleanup needed
      run: |
        echo "All Done..."
#    - name: Commit Version File
#      run: |    # this will push the change back up to git
#        git add releasy/version.py
#        git commit -m "Updated Verion to ${{ github.event.release.tag_name }} And Released build to PyPi"


